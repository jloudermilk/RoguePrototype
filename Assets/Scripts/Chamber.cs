//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using SRNG;

public class ChamberList : List<Chamber>
{


}
	
public class Chamber
{
	public int Left, Top;
	public int Width, Height;
	public int Range = 8, Offset = 3;
	public bool Overlapping = false;
	public int moveX;
	public int moveY;
	public ChamberList Neighbors;
		
	public int Right {
		get{ return Left + Width;}
	}
		
	public int Bottom {
		get{ return Top + Height;}
	}
		
	public float CenterX {
		get{ return (float)(Left + Width / 2f);}
	}
		
	public float CenterY {
		get{ return (float)(Top + Height / 2f);}
	}
		
	public Chamber ()
	{
		Neighbors = new ChamberList ();
		SimpleRNG.SetSeed (1337);
			
	}
		
	public Chamber (uint seed)
	{
		Neighbors = new ChamberList ();
		SimpleRNG.SetSeed (seed);
			
	}
		
	public bool Equals (Chamber other)
	{
		return Left == other.Left && Top == other.Top && Width == other.Width && Height == other.Height;
			
	}

	public void Copy (Chamber other)
	{
		Left = other.Left;
		Top = other.Top;
		Width = other.Width;
		Height = other.Height;
		Range = other.Range; 
		Offset = other.Offset;
		Overlapping = other.Overlapping;
		moveX = other.moveX;
		moveY = other.moveY;
		Neighbors = other.Neighbors;


	}
		
	public void SetRange (int range, int offset)
	{
		Range = range;
		Offset = offset;
	}
		
	public void SetData ()
	{
		Width = (int)(SimpleRNG.GetNormal (0.25, 0.25) * Range) + Offset + 1;
	
		if (Width < 3)
			Width = 3;


		Height = (int)(SimpleRNG.GetNormal (0.25, 0.25) * Range) + Offset + 1;
		if (Height < 3)
			Height = 3;
		if (Height > 6 && Width < 6)
			Height = 3;
		if (Height < 6 && Width > 6)
			Width = 3;

		if(Width % 2 != 0)
			Width += 1;
		if(Height % 2 != 0)
			Height += 1;
			
		Top = (int)(SimpleRNG.GetNormal () * (Range));
		Left = (int)(SimpleRNG.GetNormal () * (Range));
			
			
			
	}
		
	public void SetData (int width, int height)
	{
		Width = width;
		Height = height;
		Top = (int)(SimpleRNG.GetUniform () * Range) + Offset;
		Left = (int)(SimpleRNG.GetUniform () * Range) + Offset;
			
			
	}
		
	public void SetData (int top, int left, int width, int height)
	{
		Width = width;
		Height = height;
		Top = top;
		Left = left;
			
	}
		
	public bool CollidesWith (Chamber other)
	{

		//old collidesWith not working like it should
		if (Left > other.Right)
			return false;
			
		if (Top > other.Bottom)
			return false;
			
		if (Right < other.Left)
			return false;
			
		if (Bottom < other.Top)
			return false;
			
		return Overlapping = true;
	}
		
	public void Separate (Chamber other)
	{
		float distX = CenterX - other.CenterX;
		float distY = CenterY - other.CenterY;
			
			
		if (distX > 0) {
			moveX++;
		} else {
			moveX--;
		}
		if (distY > 0) {
			moveY++;
		} else {
			moveY--;
		}
			
			
		//			moveX  = CenterX - other.CenterX;
		//			moveY = CenterY - other.CenterY;
		//			
			
	}
		
		
		
}


